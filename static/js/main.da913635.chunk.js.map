{"version":3,"sources":["components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","actions","display","expand","margin","QuoteMachine","quoteObj","onClickHandler","classes","Card","CardContent","Typography","id","quote","author","CardActions","className","Button","variant","color","onClick","size","IconButton","target","href","encodeURI","icon","faTwitter","root","alignItems","height","backgroundColor","withBorder","border","App","useState","quotes","setQuotes","quoteIndex","setQuoteIndex","getQuote","length","Number","isInteger","useEffect","a","async","axios","result","data","fetchData","Math","floor","random","Grid","justify","container","xs","lg","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,QAAS,CACPC,QAAS,QAEXC,OAAQ,CACNC,OAAQ,YAgCGC,EA5BM,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,eAC1BC,EAAUV,IAChB,OACE,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGJ,EACC,kBAACK,EAAA,EAAD,KACE,0BAAMC,GAAG,QAAQN,EAASO,OAD5B,UACgD,0BAAMD,GAAG,UAAUN,EAASQ,SAG1E,MAIN,kBAACC,EAAA,EAAD,CAAaC,UAAWR,EAAQP,SAC9B,kBAACgB,EAAA,EAAD,CAAQD,UAAWR,EAAQL,OAAQe,QAAQ,YAAYN,GAAG,YAAYO,MAAM,UAAUC,QAASb,EAAgBc,KAAK,SAApH,QACA,kBAACC,EAAA,EAAD,CACEV,GAAG,cACHW,OAAO,SACPC,KAAMC,UAAU,yCAAD,OAA0CnB,EAASO,MAAnD,kCAEf,kBAAC,IAAD,CAAiBa,KAAMC,IAAWN,KAAK,W,QC/B3CvB,EAAYC,YAAW,CAC3B6B,KAAM,CACJC,WAAY,SACZ3B,QAAS,OACT4B,OAAQ,QACRC,gBAAiB,WAEnBC,WAAY,CACVC,OAAQ,qBAqDGC,MAjDf,WACE,IAAM1B,EAAUV,IADH,EAGeqC,mBAAS,IAHxB,mBAGNC,EAHM,KAGEC,EAHF,OAIuBF,mBAAS,GAJhC,mBAING,EAJM,KAIMC,EAJN,KAyBb,SAASC,IACP,GAAKJ,EAAOK,QAAWC,OAAOC,UAAUL,GAGxC,OAAOF,EAAOE,GAShB,OAhCAM,qBAAU,YACU,mBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACKE,IAAM,2IADX,OACVC,EADU,OAEhBX,EAAUW,EAAOC,KAAKb,QAFN,qCAIlBc,KACC,IAIHN,qBAAU,WACJR,EAAOK,OAAS,GAClBF,EAAcY,KAAKC,MAAMD,KAAKE,SAAWjB,EAAOK,WAEjD,CAACL,IAmBF,kBAACkB,EAAA,EAAD,CAAMtC,UAAWR,EAAQoB,KAAMhB,GAAG,YAAY2C,QAAQ,SAASC,WAAS,GACtE,kBAACF,EAAA,EAAD,CAAMG,GAAI,GAAIC,GAAI,EAAGC,MAAI,GACtBnB,IAAa,kBAAC,EAAD,CAAcxB,UAAWR,EAAQwB,WAAY1B,SAAUkC,IAAYjC,eATvF,WACEgC,EAAcY,KAAKC,MAAMD,KAAKE,SAAWjB,EAAOK,YASxC,QChDQmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.da913635.chunk.js","sourcesContent":["import React from 'react';\nimport { Typography, Button, Card, CardActions, CardContent, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\nconst useStyles = makeStyles(theme => ({\n  actions: {\n    display: 'flex',\n  },\n  expand: {\n    margin: 'auto',\n  },\n}));\n\nconst QuoteMachine = ({ quoteObj, onClickHandler }) => {\n  const classes = useStyles();\n  return (\n    <Card>\n      <CardContent>\n        {quoteObj ? (\n          <Typography>\n            <span id='text'>{quoteObj.quote}</span>   -   <span id='author'>{quoteObj.author}</span>\n          </Typography>\n        ) : (\n            null\n          )\n        }\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <Button className={classes.expand} variant=\"contained\" id='new-quote' color='primary' onClick={onClickHandler} size='small'>Next</Button>\n        <IconButton\n          id='tweet-quote'\n          target=\"_blank\"\n          href={encodeURI(`https://twitter.com/intent/tweet?text=${quoteObj.quote}&hashtags=RandomQuoteMachine`)}\n        >\n          <FontAwesomeIcon icon={faTwitter} size='md'></FontAwesomeIcon>\n        </IconButton>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default QuoteMachine;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport QuoteMachine from './components/QuoteMachine';\nimport { Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    alignItems: 'center',\n    display: 'flex',\n    height: '100vh',\n    backgroundColor: '#3f51b5',\n  },\n  withBorder: {\n    border: '1px solid green',\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  const [quotes, setQuotes] = useState([]);\n  const [quoteIndex, setQuoteIndex] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\n      setQuotes(result.data.quotes);\n    }\n    fetchData();\n  }, [])\n  /**\n   * set the first random index when page loads\n   */\n  useEffect(() => {\n    if (quotes.length > 0) {\n      setQuoteIndex(Math.floor(Math.random() * quotes.length));\n    }\n  }, [quotes])\n\n  /**\n   * get Quote object from states\n   */\n  function getQuote() {\n    if (!quotes.length || !Number.isInteger(quoteIndex)) {\n      return undefined;\n    }\n    return quotes[quoteIndex];\n  }\n\n  function handleNewRandomQuoteIndex() {\n    setQuoteIndex(Math.floor(Math.random() * quotes.length));\n\n\n  }\n  //Object.assign(classes.root, classes.withBorder)\n  return (\n    <Grid className={classes.root} id='quote-box' justify='center' container >\n      <Grid xs={11} lg={8} item>\n        {getQuote() ? <QuoteMachine className={classes.withBorder} quoteObj={getQuote()} onClickHandler={handleNewRandomQuoteIndex} />\n          : null\n        }\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}